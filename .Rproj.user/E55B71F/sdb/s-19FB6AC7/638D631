{
    "collab_server" : "",
    "contents" : "list.of.packages <- c(\"dplyr\", \"gmt\")\nnew.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,\"Package\"])]\nif(length(new.packages)) install.packages(new.packages)\n\nlibrary(dplyr)\n\n\n#' Data for every Buss, Train, Tram and Ferry Service\n#'\n#' Bla bla bla bla\n#' Bla bla bla bla\n#' Bla bla bla bla\n#' Bla bla bla bla\n#'\n#' @docType data\n#'\n#' @usage data(services)\n#'\n#' @format An object of class \\code{\"data.frame\"}.\n#'\n#' @keywords datasets\n#'\n#'\n#' @source \\href{http://example.com}{Example example}\n#'\n#' @examples\n#' data(services)\n#' lines <- services$line\n\n#' Schedule Data for every Buss, Train, Tram and Ferry Stop\n#'\n#' Bla bla bla bla\n#' Bla bla bla bla\n#' Bla bla bla bla\n#' Bla bla bla bla\n#'\n#' @docType data\n#'\n#' @usage data(stops)\n#'\n#' @format An object of class \\code{\"data.frame\"}.\n#'\n#' @keywords datasets\n#'\n#'\n#' @source \\href{http://example.com}{Example example}\n#'\n#' @examples\n#' data(services)\n#' station_index <- services$stationIndex\n\n#' Location and Name Data for every Buss, Train, Tram and Ferry Stations\n#'\n#' Bla bla bla bla\n#' Bla bla bla bla\n#' Bla bla bla bla\n#' Bla bla bla bla\n#'\n#' @docType data\n#'\n#' @usage data(stations)\n#'\n#' @format An object of class \\code{\"data.frame\"}.\n#'\n#' @keywords datasets\n#'\n#'\n#' @source \\href{http://example.com}{Example example}\n#'\n#' @examples\n#' data(stations)\n#' names <- services$name\n\n#' Data For Mapping Services to Dates\n#'\n#' Bla bla bla bla\n#' Bla bla bla bla\n#' Bla bla bla bla\n#' Bla bla bla bla\n#'\n#' @docType data\n#'\n#' @usage data(footnotes)\n#'\n#' @format An object of class \\code{\"data.frame\"}.\n#'\n#' @keywords datasets\n#'\n#'\n#' @source \\href{http://example.com}{Example example}\n#'\n#' @examples\n#' data(footnotes)\n#' date <- footnote$footnoteId\n\n\n\n\n\n# ############################################################\n# ## Functionality starts:\n#\n# ## Function that finds the n closest bus stops, n=5 as default\n#\n\nget_closest_stops <- function(lon, lat, n=5) {\n  data(stations) #stations <- get_stations()\n\n  return(\n\n    stations %>%\n\n      mutate(tmp_lon=lon, tmp_lat=lat, dist=gmt::geodist(stationLat,stationLon, tmp_lat, tmp_lon)*1000) %>%\n      top_n(n,-dist) %>%\n      select(-tmp_lon, -tmp_lat)\n\n  )\n\n}\n\n\n# ## Function that returns the n next departures from the selected stop, n=5 as default\n#\n\nget_next_depts <- function(stId = 2214206, time, n=5) {\n  data(stops) # stops <- get_stops()\n  data(services) # services <- get_services()\n  data(footnotes) # footnotes <- get_services()\n\n  stops %>%\n    filter(stationIndex==stId) %>%\n    left_join(services,by=\"serviceId\") %>%\n    left_join(footnotes, by=\"footnoteId\") %>%\n    filter(as.POSIXct(date)==format(time,\"%Y-%m-%d\")) %>%\n    mutate(date_arrival =\n                    as.POSIXct(paste(format(time,\"%Y-%m-%d\"),\n                                     sprintf(\"%04d\",\n                                             as.integer(sub(\"^24\",\"00\",\n                                                            arrival)))),\n                               format=\"%Y-%m-%d %H%M\"),\n           time_diff=date_arrival-time) %>%\n    filter(time_diff > 0) %>%\n    top_n(n,-time_diff)\n\n}\n\n#' Get Busses for a given location\n#'\n#' Returns IDs for the bus stop and expected times for the expected five (default)\n#' busses. The function returns both timestamps for the bus arrivals as\n#' well as minutes.\n#'\n#' @param lon numeric containing current longitude coordinate in format WGS86\n#' @param lat numeric containing current latitude coordinate in format WGS86\n#' @time POSIXct time indicating the moment of the client requesting the data.\n#' @details\n#' This function was built for an API to serve the HBL Commute App\n#' @export\n\n\nget_buses <- function(lon = 24.77770,\n                      lat = 60.17746,\n                      time = as.POSIXct(\"2016-12-07 15:00\",\n                                        format=\"%Y-%m-%d %H:%M\")) {\n\n\n  closest_stops <- get_closest_stops(lon,lat)\n\n  depts <- get_next_depts(closest_stops$stationIndex[1], time)\n\n  return(depts)\n\n}\n",
    "created" : 1481199623982.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "639670097",
    "id" : "638D631",
    "lastKnownWriteTime" : 1481214510,
    "last_content_update" : 1481214510052,
    "path" : "~/r-scripts/HBLCommuteTrafficData/R/hbl-commute-traffic-data.R",
    "project_path" : "R/hbl-commute-traffic-data.R",
    "properties" : {
        "marks" : "<:8,0\n>:8,0",
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}